# Multi-stage Optimized Dockerfile for FastAPI Backend
# Implements security best practices, performance optimizations, and minimal attack surface

# Build arguments
ARG PYTHON_VERSION=3.12
ARG BUILD_DATE
ARG VCS_REF

# ================================
# Base Stage - Common Dependencies
# ================================
FROM python:${PYTHON_VERSION}-slim as base

# Metadata
LABEL maintainer="A1Betting Team" \
      version="2.0.0" \
      description="A1Betting FastAPI Backend - Optimized Production Build" \
      build-date="${BUILD_DATE}" \
      vcs-ref="${VCS_REF}"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100

# Install system dependencies with security updates
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    gcc \
    g++ \
    libc-dev \
    libffi-dev \
    libssl-dev \
    pkg-config \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* /var/tmp/*

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser -s /bin/false appuser

# Create application directories
RUN mkdir -p /app /app/logs /app/data /app/cache && \
    chown -R appuser:appuser /app

# ================================
# Dependencies Stage
# ================================
FROM base as dependencies

# Copy requirements first for better layer caching
COPY requirements.txt requirements-prod.txt ./

# Install Python dependencies with optimizations
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r requirements-prod.txt && \
    pip install --no-cache-dir gunicorn[gevent] uvloop httptools && \
    find /usr/local -type f -name '*.pyc' -delete && \
    find /usr/local -type d -name '__pycache__' -delete

# ================================
# Development Stage
# ================================
FROM dependencies as development

# Install development dependencies
COPY requirements-dev.txt ./
RUN pip install --no-cache-dir -r requirements-dev.txt

# Copy application code
WORKDIR /app
COPY --chown=appuser:appuser . .

# Set development-specific environment
ENV ENVIRONMENT=development \
    DEBUG=true \
    LOG_LEVEL=DEBUG

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Development command with hot reload
CMD ["uvicorn", "backend.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "info"]

# ================================
# Production Build Stage
# ================================
FROM dependencies as build-production

# Install build tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy source code
WORKDIR /app
COPY --chown=appuser:appuser . .

# Compile Python files and optimize
RUN python -m compileall -b . && \
    find . -name "*.py" -delete && \
    find . -name "__pycache__" -type d -exec rm -rf {} + || true

# ================================
# Production Runtime Stage
# ================================
FROM python:${PYTHON_VERSION}-slim as production

# Copy runtime dependencies
COPY --from=dependencies /usr/local/lib/python*/site-packages /usr/local/lib/python*/site-packages
COPY --from=dependencies /usr/local/bin /usr/local/bin

# Install only runtime system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* /var/tmp/*

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser -s /bin/false appuser

# Create application directories
RUN mkdir -p /app /app/logs /app/data /app/cache && \
    chown -R appuser:appuser /app

# Copy compiled application
WORKDIR /app
COPY --from=build-production --chown=appuser:appuser /app .

# Set production environment
ENV ENVIRONMENT=production \
    DEBUG=false \
    LOG_LEVEL=INFO \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    WORKER_PROCESSES=4 \
    MAX_CONNECTIONS=1000 \
    KEEP_ALIVE=2

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Production command with gunicorn
CMD ["gunicorn", "backend.main:app", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--workers", "4", \
     "--bind", "0.0.0.0:8000", \
     "--keep-alive", "2", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--timeout", "60", \
     "--graceful-timeout", "30", \
     "--access-logfile", "/app/logs/access.log", \
     "--error-logfile", "/app/logs/error.log", \
     "--log-level", "info", \
     "--preload"]

# ================================
# Testing Stage
# ================================
FROM development as testing

# Install test dependencies
COPY requirements-test.txt ./
RUN pip install --no-cache-dir -r requirements-test.txt

# Copy test files
COPY --chown=appuser:appuser tests/ tests/

# Set test environment
ENV ENVIRONMENT=testing \
    DEBUG=true \
    LOG_LEVEL=DEBUG \
    DATABASE_URL=sqlite:///:memory:

# Test command
CMD ["python", "-m", "pytest", "tests/", "-v", "--cov=backend", "--cov-report=html", "--cov-report=term"]

# ================================
# Security Scanning Stage
# ================================
FROM dependencies as security-scan

# Install security tools
RUN pip install --no-cache-dir safety bandit semgrep

# Copy source for scanning
WORKDIR /app
COPY --chown=appuser:appuser . .

# Security scan command
CMD ["sh", "-c", "safety check && bandit -r backend/ && semgrep --config=auto backend/"]
