# Development Docker Compose with Hot Reload and Debugging
# Optimized for local development with fast feedback loops

version: "3.9"

services:
  # ================================
  # Backend Development Service
  # ================================
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.backend.optimized
      target: development
      args:
        PYTHON_VERSION: "3.12"
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
    container_name: a1betting-backend-dev
    ports:
      - "8000:8000"
      - "5678:5678" # Debug port
    volumes:
      - ./backend:/app/backend:rw
      - ./requirements.txt:/app/requirements.txt:ro
      - ./requirements-dev.txt:/app/requirements-dev.txt:ro
      - backend-logs:/app/logs
      - backend-cache:/app/cache
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=postgresql://dev_user:dev_password@postgres-dev:5432/a1betting_dev
      - REDIS_URL=redis://redis-dev:6379/0
      - PYTHONPATH=/app
      - VITE_BACKEND_URL=http://localhost:8000
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - a1betting-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ================================
  # Frontend Development Service
  # ================================
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: ../Dockerfile.frontend.optimized
      target: development
      args:
        NODE_VERSION: "20"
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
    container_name: a1betting-frontend-dev
    ports:
      - "8173:5173"
      - "24678:24678" # HMR port
    volumes:
      - ./frontend/src:/app/src:rw
      - ./frontend/public:/app/public:rw
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/vite.config.ts:/app/vite.config.ts:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      - ./frontend/.env:/app/.env:ro
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_ENVIRONMENT=development
      - VITE_BACKEND_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
    depends_on:
      - backend-dev
    networks:
      - a1betting-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # PostgreSQL Development Database
  # ================================
  postgres-dev:
    image: postgres:16-alpine
    container_name: a1betting-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=a1betting_dev
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./database/init-dev.sql:/docker-entrypoint-initdb.d/init-dev.sql:ro
    networks:
      - a1betting-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d a1betting_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ================================
  # Redis Development Cache
  # ================================
  redis-dev:
    image: redis:7-alpine
    container_name: a1betting-redis-dev
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis-dev-data:/data
    networks:
      - a1betting-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # ================================
  # Development Utilities
  # ================================

  # Database Admin (pgAdmin)
  pgadmin-dev:
    image: dpage/pgadmin4:latest
    container_name: a1betting-pgadmin-dev
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@a1betting.local
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin-dev-data:/var/lib/pgadmin
    depends_on:
      - postgres-dev
    networks:
      - a1betting-dev
    restart: unless-stopped
    profiles:
      - admin

  # Redis Admin (RedisInsight)
  redis-insight-dev:
    image: redislabs/redisinsight:latest
    container_name: a1betting-redis-insight-dev
    ports:
      - "8001:8001"
    volumes:
      - redis-insight-data:/db
    depends_on:
      - redis-dev
    networks:
      - a1betting-dev
    restart: unless-stopped
    profiles:
      - admin

  # Development Proxy (Nginx)
  nginx-dev:
    image: nginx:alpine
    container_name: a1betting-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend-dev
      - frontend-dev
    networks:
      - a1betting-dev
    restart: unless-stopped
    profiles:
      - proxy

  # File Watcher for Live Reload
  file-watcher:
    image: node:20-alpine
    container_name: a1betting-file-watcher
    working_dir: /app
    volumes:
      - ./:/app:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: >
      sh -c "
        npm install -g chokidar-cli &&
        chokidar 'backend/**/*.py' 'frontend/src/**/*' --initial --ignore 'node_modules' --ignore '__pycache__' --command 'echo File changed: {path}'
      "
    networks:
      - a1betting-dev
    restart: unless-stopped
    profiles:
      - watcher

# ================================
# Networks
# ================================
networks:
  a1betting-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# Volumes
# ================================
volumes:
  postgres-dev-data:
    driver: local
  redis-dev-data:
    driver: local
  pgadmin-dev-data:
    driver: local
  redis-insight-data:
    driver: local
  backend-logs:
    driver: local
  backend-cache:
    driver: local
  node_modules:
    driver: local
# ================================
# Development Profiles
# ================================
# Usage:
# docker-compose -f docker-compose.dev.yml up                    # Core services only
# docker-compose -f docker-compose.dev.yml --profile admin up   # Include admin tools
# docker-compose -f docker-compose.dev.yml --profile proxy up   # Include nginx proxy
# docker-compose -f docker-compose.dev.yml --profile watcher up # Include file watcher
