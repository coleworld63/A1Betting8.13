import logging
import os

try:
    from dotenv import load_dotenv

    load_dotenv(
        dotenv_path=os.path.join(os.path.dirname(os.path.dirname(__file__)), ".env")
    )
except ImportError:
    pass  # dotenv not installed; environment variables must be set another way

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from backend.routes.mlb_extras import router as mlb_extras_router
from backend.routes.unified_api import router as unified_router

logger = logging.getLogger("propollama")
logger.debug(f"Running test_app.py from: {__file__}")
logger.debug(f"Current working directory: {os.getcwd()}")


import time

START_TIME = time.time()
MOCK_DEPENDENCIES = {"db": True, "ml": True, "api": True}


app = FastAPI()
app.include_router(unified_router, prefix="/api/unified")
app.include_router(unified_router, prefix="/api")
app.include_router(mlb_extras_router)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Compatibility endpoint for legacy version checks
@app.get("/api/version")
async def api_version():
    logger.info("Registered /api/version endpoint (compat)")
    uptime = int(time.time() - START_TIME)
    return {
        "version": "1.0.0",
        "status": "ok",
        "uptime": uptime,
        "dependencies": MOCK_DEPENDENCIES,
    }


# Compatibility endpoint for legacy health checks
@app.get("/api/health/status")
async def legacy_health():
    logger.info("Registered /api/health/status endpoint (compat)")
    uptime = int(time.time() - START_TIME)
    return {
        "status": "healthy",
        "uptime": uptime,
        "services": [k for k, v in MOCK_DEPENDENCIES.items() if v],
        "dependencies": MOCK_DEPENDENCIES,
    }


@app.get("/")
async def root():
    logger.info("Registered root endpoint")
    return {"name": "A1Betting Ultra-Enhanced Backend"}


@app.get("/health")
async def health():
    logger.info("Registered /health endpoint")
    uptime = int(time.time() - START_TIME)
    return {
        "status": "healthy",
        "uptime": uptime,
        "services": [k for k, v in MOCK_DEPENDENCIES.items() if v],
        "dependencies": MOCK_DEPENDENCIES,
    }


@app.get("/version")
async def version():
    logger.info("Registered /version endpoint")
    uptime = int(time.time() - START_TIME)
    return {
        "version": "1.0.0",
        "status": "ok",
        "uptime": uptime,
        "dependencies": MOCK_DEPENDENCIES,
    }


@app.get("/test")
async def test_endpoint():
    logger.info("Registered /test endpoint")
    return {"message": "Test endpoint is working"}


# Minimal unified analysis endpoint for frontend integration
from fastapi import status


@app.post("/api/v1/unified/analysis")
async def unified_analysis(request: Request):
    logger.info("Registered POST /api/v1/unified/analysis endpoint")
    try:
        payload = await request.json()
        logger.info(f"/api/v1/unified/analysis called with payload: {payload}")
        sport = payload.get("sport", "NBA")
        min_confidence = payload.get("min_confidence", 70)
        user_id = payload.get("user_id")
        from backend.services.unified_prediction_service import (
            unified_prediction_service,
        )

        predictions = await unified_prediction_service.get_enhanced_predictions(
            sport=sport,
            min_confidence=min_confidence,
            include_portfolio_optimization=True,
            include_ai_insights=True,
            user_id=user_id,
        )
        enriched_props = [pred.to_dict() for pred in predictions]
        response = {
            "analysis": f"{sport} props analysis generated by unified pipeline.",
            "confidence": 0.85,
            "confidence_score": 0.85,
            "recommendation": "OVER",
            "key_factors": ["pace", "usage", "shot_volume"],
            "processing_time": 0.02,
            "cached": False,
            "enriched_props": enriched_props,
            "enhanced_bets": [],
            "count": len(enriched_props),
            "portfolio_metrics": {},
            "ai_insights": [],
            "filters": {
                "sport": sport,
                "min_confidence": min_confidence,
                "max_results": 10,
            },
            "status": "ok",
        }
        logger.info(f"/api/v1/unified/analysis response: {response}")
        return JSONResponse(response)
    except Exception as e:
        logger.warning(f"Error in /api/v1/unified/analysis: {e}")
        return JSONResponse(
            {"error": str(e)},
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        )


# Add a GET endpoint for debugging
@app.get("/api/v1/unified/analysis")
async def unified_analysis_get():
    logger.info("Registered GET /api/v1/unified/analysis endpoint")
    return {"message": "GET endpoint for unified analysis is working"}


# Print all registered routes at startup
def print_routes():
    logger.debug("Registered routes:")
    for route in app.routes:
        logger.debug(f"{route.path} [{','.join(route.methods)}]")


from backend.routes.auth import router as auth_router

app.include_router(auth_router)

print_routes()
