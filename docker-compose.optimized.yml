# Docker Compose for A1Betting7-13.2
# Modern containerization with optimized networking, health checks, and development workflow

version: "3.8"

services:
  # Backend FastAPI Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.optimized
      target: ${DOCKER_TARGET:-development}
      args:
        - PYTHON_VERSION=3.12
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: a1betting-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./a1betting.db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-100/minute}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:8173,http://localhost:3000}
      - ENABLE_DOCS=${ENABLE_DOCS:-true}
      - WORKER_PROCESSES=${WORKER_PROCESSES:-1}
      - MAX_CONNECTIONS=${MAX_CONNECTIONS:-1000}
    volumes:
      - ./backend:/app/backend:ro
      - ./data:/app/data
      - ./logs:/app/logs
      - backend-cache:/app/cache
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - a1betting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 512M
    labels:
      - "com.a1betting.service=backend"
      - "com.a1betting.version=${VERSION:-latest}"
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.a1betting.local`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  # Frontend Vite Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.optimized
      target: ${FRONTEND_TARGET:-development}
      args:
        - NODE_VERSION=20
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: a1betting-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-8173}:8173"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_BACKEND_URL=http://backend:8000
      - VITE_API_TIMEOUT=${VITE_API_TIMEOUT:-30000}
      - VITE_ENABLE_DEVTOOLS=${VITE_ENABLE_DEVTOOLS:-true}
      - VITE_ENABLE_HOT_RELOAD=${VITE_ENABLE_HOT_RELOAD:-true}
      - VITE_ENABLE_PERFORMANCE_MONITORING=${VITE_ENABLE_PERFORMANCE_MONITORING:-true}
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/vite.config.ts:/app/vite.config.ts:ro
      - frontend-cache:/app/node_modules/.cache
      - frontend-dist:/app/dist
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - a1betting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M
    labels:
      - "com.a1betting.service=frontend"
      - "com.a1betting.version=${VERSION:-latest}"
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`a1betting.local`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=8173"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: a1betting-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - a1betting-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 128M
    command: redis-server /usr/local/etc/redis/redis.conf
    labels:
      - "com.a1betting.service=cache"

  # PostgreSQL Database (Production)
  postgres:
    image: postgres:16-alpine
    container_name: a1betting-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-a1betting}
      - POSTGRES_USER=${POSTGRES_USER:-a1betting}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-a1betting_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - a1betting-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-a1betting} -d ${POSTGRES_DB:-a1betting}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M
    labels:
      - "com.a1betting.service=database"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: a1betting-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - a1betting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 64M
    labels:
      - "com.a1betting.service=proxy"

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: a1betting-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - a1betting-network
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    labels:
      - "com.a1betting.service=monitoring"

  grafana:
    image: grafana/grafana:latest
    container_name: a1betting-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - a1betting-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    labels:
      - "com.a1betting.service=analytics"

# Networks
networks:
  a1betting-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.a1betting.network=main"

# Volumes
volumes:
  postgres-data:
    driver: local
    labels:
      - "com.a1betting.volume=database"
  redis-data:
    driver: local
    labels:
      - "com.a1betting.volume=cache"
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  backend-cache:
    driver: local
  frontend-cache:
    driver: local
  frontend-dist:
    driver: local
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local
