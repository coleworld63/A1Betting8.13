# Production-Grade Deployment for A1Betting7-13.2
# Implements 2025 Kubernetes best practices with security, monitoring, and reliability

apiVersion: v1
kind: Namespace
metadata:
  name: a1betting-prod
  labels:
    name: a1betting-prod
    environment: production
    app: a1betting

---
# Backend Deployment with OpenTelemetry instrumentation
apiVersion: apps/v1
kind: Deployment
metadata:
  name: a1betting-backend
  namespace: a1betting-prod
  labels:
    app: a1betting-backend
    tier: backend
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: a1betting-backend
  template:
    metadata:
      labels:
        app: a1betting-backend
        tier: backend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: a1betting-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: a1betting-backend
          image: a1betting/backend:latest
          imagePullPolicy: Always
          env:
            - name: ENVIRONMENT
              value: "production"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: connection-string
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: connection-string
            - name: SPORTRADAR_API_KEY
              valueFrom:
                secretKeyRef:
                  name: api-keys
                  key: sportradar
            - name: THE_ODDS_API_KEY
              valueFrom:
                secretKeyRef:
                  name: api-keys
                  key: theodds
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://jaeger:4317"
            - name: OTEL_SERVICE_NAME
              value: "a1betting-backend"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "service.name=a1betting-backend,service.version=1.0.0,deployment.environment=production"
          ports:
            - containerPort: 8000
              name: http
              protocol: TCP
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health/ready
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: var-run
              mountPath: /var/run
      volumes:
        - name: tmp
          emptyDir: {}
        - name: var-run
          emptyDir: {}
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: a1betting-backend

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: a1betting-frontend
  namespace: a1betting-prod
  labels:
    app: a1betting-frontend
    tier: frontend
    version: v1.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: a1betting-frontend
  template:
    metadata:
      labels:
        app: a1betting-frontend
        tier: frontend
        version: v1.0.0
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: a1betting-frontend
          image: a1betting/frontend:latest
          imagePullPolicy: Always
          env:
            - name: VITE_BACKEND_URL
              value: "http://a1betting-backend-service:8000"
            - name: VITE_ENVIRONMENT
              value: "production"
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "250m"
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: a1betting-backend-service
  namespace: a1betting-prod
  labels:
    app: a1betting-backend
    tier: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
      name: http
  selector:
    app: a1betting-backend
  type: ClusterIP

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: a1betting-frontend-service
  namespace: a1betting-prod
  labels:
    app: a1betting-frontend
    tier: frontend
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app: a1betting-frontend
  type: ClusterIP

---
# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: a1betting-backend-hpa
  namespace: a1betting-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: a1betting-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60

---
# Pod Disruption Budget for Backend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: a1betting-backend-pdb
  namespace: a1betting-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: a1betting-backend

---
# Network Policy for Backend
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: a1betting-backend-netpol
  namespace: a1betting-prod
spec:
  podSelector:
    matchLabels:
      app: a1betting-backend
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: a1betting-frontend
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8000
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: a1betting-prod
      ports:
        - protocol: TCP
          port: 5432 # PostgreSQL
        - protocol: TCP
          port: 6379 # Redis
    - to: [] # Allow external API calls
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
