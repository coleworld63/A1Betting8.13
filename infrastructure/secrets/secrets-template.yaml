# Secrets Management Template for A1Betting7-13.2
# Template for creating production secrets - NEVER commit actual secret values

# PostgreSQL Database Credentials
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: a1betting-prod
  labels:
    app: postgresql
    component: database
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  username: YTFiZXR0aW5n # a1betting
  password: <BASE64_ENCODED_STRONG_PASSWORD>
  database: YTFiZXR0aW5nX3Byb2Q= # a1betting_prod
  connection-string: <BASE64_ENCODED_FULL_CONNECTION_STRING>
  # Example: postgresql://a1betting:password@postgresql-service:5432/a1betting_prod

---
# Redis Cache Credentials
apiVersion: v1
kind: Secret
metadata:
  name: redis-credentials
  namespace: a1betting-prod
  labels:
    app: redis
    component: cache
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  password: <BASE64_ENCODED_REDIS_PASSWORD>
  connection-string: <BASE64_ENCODED_REDIS_CONNECTION_STRING>
  # Example: redis://:password@redis-service:6379/0

---
# External API Keys
apiVersion: v1
kind: Secret
metadata:
  name: api-keys
  namespace: a1betting-prod
  labels:
    app: a1betting
    component: external-apis
type: Opaque
data:
  # Base64 encoded API keys - replace with actual values
  sportradar: <BASE64_ENCODED_SPORTRADAR_API_KEY>
  theodds: <BASE64_ENCODED_THE_ODDS_API_KEY>
  weather: <BASE64_ENCODED_WEATHER_API_KEY>
  news: <BASE64_ENCODED_NEWS_API_KEY>
  injury: <BASE64_ENCODED_INJURY_API_KEY>

---
# JWT and Security Secrets
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secrets
  namespace: a1betting-prod
  labels:
    app: a1betting
    component: authentication
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  jwt-secret-key: <BASE64_ENCODED_JWT_SECRET_KEY>
  encryption-key: <BASE64_ENCODED_ENCRYPTION_KEY>
  # Generate with: openssl rand -base64 32

---
# SMTP Email Configuration
apiVersion: v1
kind: Secret
metadata:
  name: smtp-credentials
  namespace: a1betting-prod
  labels:
    app: a1betting
    component: notifications
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  smtp-host: <BASE64_ENCODED_SMTP_HOST>
  smtp-username: <BASE64_ENCODED_SMTP_USERNAME>
  smtp-password: <BASE64_ENCODED_SMTP_PASSWORD>
  smtp-from-email: <BASE64_ENCODED_FROM_EMAIL>

---
# Backup Storage Credentials
apiVersion: v1
kind: Secret
metadata:
  name: backup-credentials
  namespace: a1betting-prod
  labels:
    app: backup
    component: storage
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  s3-bucket: <BASE64_ENCODED_S3_BUCKET_NAME>
  aws-access-key-id: <BASE64_ENCODED_AWS_ACCESS_KEY_ID>
  aws-secret-access-key: <BASE64_ENCODED_AWS_SECRET_ACCESS_KEY>

---
# Monitoring Authentication
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-auth
  namespace: monitoring
  labels:
    app: monitoring
    component: authentication
type: Opaque
data:
  # Base64 encoded values for basic auth - replace with actual values
  auth: <BASE64_ENCODED_AUTH_STRING>
  # Generate with: htpasswd -nb admin password | base64

---
# Grafana Admin Credentials
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin-credentials
  namespace: monitoring
  labels:
    app: grafana
    component: authentication
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  admin-user: YWRtaW4= # admin
  admin-password: <BASE64_ENCODED_GRAFANA_ADMIN_PASSWORD>

---
# Container Registry Credentials
apiVersion: v1
kind: Secret
metadata:
  name: container-registry-credentials
  namespace: a1betting-prod
  labels:
    app: a1betting
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: <BASE64_ENCODED_DOCKER_CONFIG_JSON>
  # Example format:
  # {
  #   "auths": {
  #     "ghcr.io": {
  #       "username": "your-username",
  #       "password": "your-token",
  #       "auth": "base64(username:password)"
  #     }
  #   }
  # }

---
# TLS Certificates (managed by cert-manager, but manual backup)
apiVersion: v1
kind: Secret
metadata:
  name: a1betting-tls-backup
  namespace: a1betting-prod
  labels:
    app: a1betting
    component: tls
  annotations:
    description: "Backup of TLS certificates - managed by cert-manager"
type: kubernetes.io/tls
data:
  # Base64 encoded values - typically managed by cert-manager
  tls.crt: <BASE64_ENCODED_TLS_CERTIFICATE>
  tls.key: <BASE64_ENCODED_TLS_PRIVATE_KEY>

---
# Application Configuration Secrets
apiVersion: v1
kind: Secret
metadata:
  name: app-config-secrets
  namespace: a1betting-prod
  labels:
    app: a1betting
    component: configuration
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  cors-origins: <BASE64_ENCODED_CORS_ORIGINS>
  webhook-slack: <BASE64_ENCODED_SLACK_WEBHOOK_URL>
  webhook-discord: <BASE64_ENCODED_DISCORD_WEBHOOK_URL>

---
# External Service Integration Secrets
apiVersion: v1
kind: Secret
metadata:
  name: external-integrations
  namespace: a1betting-prod
  labels:
    app: a1betting
    component: integrations
type: Opaque
data:
  # Base64 encoded values for external services
  datadog-api-key: <BASE64_ENCODED_DATADOG_API_KEY>
  newrelic-license-key: <BASE64_ENCODED_NEWRELIC_LICENSE_KEY>
  sentry-dsn: <BASE64_ENCODED_SENTRY_DSN>

---
# Database Migration Secrets (if needed)
apiVersion: v1
kind: Secret
metadata:
  name: migration-credentials
  namespace: a1betting-prod
  labels:
    app: a1betting
    component: migration
type: Opaque
data:
  # Base64 encoded values for database migrations
  migration-user: <BASE64_ENCODED_MIGRATION_USERNAME>
  migration-password: <BASE64_ENCODED_MIGRATION_PASSWORD>
  source-database-url: <BASE64_ENCODED_SOURCE_DB_URL>

---
# Instructions ConfigMap for Secret Management
apiVersion: v1
kind: ConfigMap
metadata:
  name: secrets-instructions
  namespace: a1betting-prod
  labels:
    app: a1betting
    component: documentation
data:
  README.md: |
    # Secrets Management Instructions

    ## Creating Secrets for Production

    1. **Base64 Encoding**: All secret values must be base64 encoded
       ```bash
       echo -n "your-secret-value" | base64
       ```

    2. **Required Secrets**:
       - postgres-credentials: Database connection details
       - redis-credentials: Cache connection details
       - api-keys: External API keys (SportRadar, TheOdds, etc.)
       - jwt-secrets: Authentication and encryption keys
       - smtp-credentials: Email notification settings
       - backup-credentials: S3 backup storage credentials

    3. **Generating Strong Passwords**:
       ```bash
       # Generate 32-character password
       openssl rand -base64 32
       
       # Generate JWT secret key
       openssl rand -base64 64
       ```

    4. **Creating Secrets via kubectl**:
       ```bash
       # Create from literal values
       kubectl create secret generic postgres-credentials \
         --from-literal=username=a1betting \
         --from-literal=password=your-strong-password \
         --from-literal=database=a1betting_prod \
         --namespace=a1betting-prod
       
       # Create from environment file
       kubectl create secret generic api-keys \
         --from-env-file=api-keys.env \
         --namespace=a1betting-prod
       ```

    5. **Security Best Practices**:
       - Use different secrets for staging/production
       - Rotate secrets quarterly
       - Use external secret management (HashiCorp Vault, AWS Secrets Manager)
       - Never commit secrets to version control
       - Use least-privilege access for secret access

    6. **Backup and Recovery**:
       - Secrets are backed up automatically (without values)
       - Store secret values in secure offline storage
       - Test secret restoration procedures

    7. **Monitoring**:
       - Monitor secret access logs
       - Alert on failed secret retrievals
       - Regular secret audit and rotation

    ## External Secret Management Integration

    For production environments, consider using:
    - HashiCorp Vault
    - AWS Secrets Manager
    - Azure Key Vault
    - Google Secret Manager

    These provide additional features like:
    - Automatic rotation
    - Audit logging
    - Fine-grained access control
    - Encryption at rest and in transit

  secret-rotation-schedule.md: |
    # Secret Rotation Schedule

    ## Quarterly Rotation (Every 3 months)
    - Database passwords
    - JWT secret keys
    - Encryption keys
    - SMTP passwords

    ## Annual Rotation (Every 12 months)
    - API keys (unless provider requires more frequent rotation)
    - TLS certificates (if not using auto-renewal)
    - Backup storage credentials

    ## As Needed
    - Container registry tokens
    - Webhook URLs
    - External service credentials

    ## Rotation Checklist
    1. Generate new secret value
    2. Update secret in Kubernetes
    3. Restart affected pods
    4. Verify functionality
    5. Update backup storage
    6. Document rotation in audit log
    7. Securely dispose of old secret values
