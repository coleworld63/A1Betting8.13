# Pre-commit configuration for A1Betting7-13.2
# Ensures code quality and consistency across the project

repos:
  # General code formatting and linting
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: ["--maxkb=1000"]
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: pretty-format-json
        args: ["--autofix", "--no-sort-keys"]

  # Python specific hooks
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        language_version: python3
        files: '^backend/.*\.py$'

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile", "black"]
        files: '^backend/.*\.py$'

  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        files: '^backend/.*\.py$'
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        files: '^backend/.*\.py$'
        additional_dependencies:
          - types-requests
          - types-redis
          - types-python-dateutil

  # Security scanning for Python
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ["-r", "backend/", "-f", "json", "-o", "bandit-report.json"]
        files: '^backend/.*\.py$'

  # JavaScript/TypeScript specific hooks
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        files: '^frontend/.*\.(js|jsx|ts|tsx|json|css|md)$'
        exclude: "^frontend/dist/.*$"

  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.55.0
    hooks:
      - id: eslint
        files: '^frontend/.*\.(js|jsx|ts|tsx)$'
        exclude: "^frontend/dist/.*$"
        additional_dependencies:
          - "@typescript-eslint/eslint-plugin@^8.38.0"
          - "@typescript-eslint/parser@^8.38.0"
          - "eslint-plugin-react@^7.37.5"
          - "eslint-plugin-react-hooks@^5.2.0"

  # TypeScript type checking
  - repo: local
    hooks:
      - id: typescript-check
        name: TypeScript Type Check
        entry: bash -c 'cd frontend && npm run type-check'
        language: system
        files: '^frontend/.*\.(ts|tsx)$'
        exclude: "^frontend/dist/.*$"
        pass_filenames: false

  # Docker hooks
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        files: "^.*Dockerfile.*$"

  # YAML and JSON linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        args: [-c=.yamllint.yml]

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        args: ["--config", ".markdownlint.yml"]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck

  # Git hooks
  - repo: https://github.com/commitizen-tools/commitizen
    rev: 3.13.0
    hooks:
      - id: commitizen
      - id: commitizen-branch
        stages: [push]

  # API Contract Enforcement - Critical for hardening
  - repo: local
    hooks:
      - id: api-contract-tests
        name: API Contract Tests
        entry: python
        language: system
        files: '^backend/(routes/|tests/).*\.py$'
        args:
          - -m
          - pytest
          - backend/tests/test_contract_http_comprehensive.py
          - -v
          - --tb=short
        pass_filenames: false
        stages: [commit]

      - id: contract-violation-scan
        name: Scan for Contract Violations
        entry: python
        language: system
        files: '^backend/routes/.*\.py$'
        args:
          - -c
          - |
            import re
            import sys
            from pathlib import Path
            
            violations = []
            patterns = [
                r'raise HTTPException\(',
                r'return\s+\{\s*["\']error["\']:\s*[^}]+\}',
                r'return\s+\{\s*["\']status["\']:\s*["\']error["\']',
                r'JSONResponse\([^)]*status_code\s*=\s*[45]\d\d[^)]*["\']error["\']',
            ]
            
            for file_arg in sys.argv[1:]:
                if not file_arg.endswith('.py'):
                    continue
                try:
                    with open(file_arg, 'r', encoding='utf-8') as f:
                        content = f.read()
                    for pattern in patterns:
                        matches = list(re.finditer(pattern, content, re.MULTILINE | re.DOTALL))
                        for match in matches:
                            line_num = content[:match.start()].count('\n') + 1
                            violations.append(f"{file_arg}:{line_num} - {match.group()[:50]}")
                except Exception as e:
                    print(f"Warning: Could not scan {file_arg}: {e}")
            
            if violations:
                print("‚ùå Contract violations found (use exception handlers instead):")
                for v in violations[:10]:  # Show first 10
                    print(f"  {v}")
                if len(violations) > 10:
                    print(f"  ... and {len(violations) - 10} more")
                print("\nüìñ See API_CONTRACT_GUIDE.md for proper patterns")
                sys.exit(1)
            else:
                print("‚úÖ No contract violations detected")
        pass_filenames: true
        stages: [commit]

      - id: response-model-annotations
        name: Check Response Model Annotations
        entry: python
        language: system
        files: '^backend/routes/(enhanced_api|production_health_routes|unified_api|optimized_api_routes)\.py$'
        args:
          - -c
          - |
            import re
            import sys
            
            missing = []
            for file_arg in sys.argv[1:]:
                try:
                    with open(file_arg, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    route_pattern = r'@router\.(get|post|put|delete|patch)\s*\([^)]*\)\s*\n\s*(?:async\s+)?def\s+(\w+)'
                    response_model_pattern = r'response_model\s*='
                    
                    for match in re.finditer(route_pattern, content, re.MULTILINE):
                        func_name = match.group(2)
                        if func_name in ['health_check', 'debug_endpoint', 'system_debug']:
                            continue
                        
                        decorator_start = content.rfind('@router', 0, match.start())
                        decorator_end = match.end()
                        decorator_section = content[decorator_start:decorator_end]
                        
                        if not re.search(response_model_pattern, decorator_section):
                            line_num = content[:match.start()].count('\n') + 1
                            missing.append(f"{file_arg}:{line_num} - {func_name}")
                except Exception as e:
                    print(f"Warning: Could not check {file_arg}: {e}")
            
            if missing:
                print("‚ùå Critical routes missing response_model annotations:")
                for m in missing:
                    print(f"  {m}")
                print("\nüìñ Add response_model= parameter to route decorators")
                sys.exit(1)
            else:
                print("‚úÖ All critical routes have response_model annotations")
        pass_filenames: true
        stages: [commit]

  # Security scanning for dependencies
  - repo: local
    hooks:
      - id: safety-check
        name: Python Safety Check
        entry: bash -c 'cd backend && safety check'
        language: system
        files: '^backend/requirements.*\.txt$'
        pass_filenames: false

      - id: npm-audit
        name: NPM Security Audit
        entry: bash -c 'cd frontend && npm audit --audit-level moderate'
        language: system
        files: '^frontend/(package\.json|package-lock\.json)$'
        pass_filenames: false

  # Performance checks
  - repo: local
    hooks:
      - id: bundle-size-check
        name: Bundle Size Check
        entry: bash -c 'cd frontend && npm run build && npx bundlesize'
        language: system
        files: '^frontend/.*\.(js|jsx|ts|tsx|css)$'
        exclude: "^frontend/dist/.*$"
        pass_filenames: false

      # Smoke tests - quick subset of critical functionality
      - id: smoke-tests-backend
        name: Backend Smoke Tests
        entry: bash -c 'cd backend && python -m pytest tests/smoke/ -v --tb=short || python -m pytest tests/ -k "smoke" -v --tb=short'
        language: system
        files: '^backend/.*\.py$'
        pass_filenames: false
        stages: [pre-push]

      - id: smoke-tests-frontend
        name: Frontend Smoke Tests
        entry: bash -c 'cd frontend && npm run test:smoke || npm run test -- --testNamePattern="smoke" --passWithNoTests'
        language: system
        files: '^frontend/.*\.(js|jsx|ts|tsx)$'
        exclude: "^frontend/dist/.*$"
        pass_filenames: false
        stages: [pre-push]

      # Enhanced TypeScript checking
      - id: typescript-strict-check
        name: TypeScript Strict Mode Check
        entry: bash -c 'cd frontend && npx tsc --noEmit --strict'
        language: system
        files: '^frontend/.*\.(ts|tsx)$'
        exclude: "^frontend/dist/.*$"
        pass_filenames: false

      # Test coverage check
      - id: test-coverage-check
        name: Test Coverage Check
        entry: bash -c 'cd backend && python -m pytest --cov=. --cov-report=term --cov-fail-under=70 --tb=no -q || echo "Test coverage below threshold - continuing with warning"'
        language: system
        files: '^backend/.*\.py$'
        pass_filenames: false
        stages: [pre-push]

# Global configuration
default_install_hook_types: [pre-commit, pre-push, commit-msg]
fail_fast: false
minimum_pre_commit_version: 3.0.0

# CI/CD specific configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: []
  submodules: false
